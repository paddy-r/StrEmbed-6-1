# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopLoc module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_toploc.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TopLoc
else:
    import _TopLoc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopLoc.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _TopLoc.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _TopLoc.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _TopLoc.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _TopLoc.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _TopLoc.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TopLoc.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TopLoc.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TopLoc.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TopLoc.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _TopLoc.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _TopLoc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _TopLoc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _TopLoc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _TopLoc.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _TopLoc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TopLoc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TopLoc:
_TopLoc.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: "Standard_Failure", method_name: "std::string", class_name: "std::string") -> "void":
    return _TopLoc.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TopLoc_Datum3D_Create() -> "opencascade::handle< TopLoc_Datum3D >":
    return _TopLoc.Handle_TopLoc_Datum3D_Create()

def Handle_TopLoc_Datum3D_DownCast(t: "opencascade::handle< Standard_Transient > const &") -> "opencascade::handle< TopLoc_Datum3D >":
    return _TopLoc.Handle_TopLoc_Datum3D_DownCast(t)

def Handle_TopLoc_Datum3D_IsNull(t: "opencascade::handle< TopLoc_Datum3D > const &") -> "bool":
    return _TopLoc.Handle_TopLoc_Datum3D_IsNull(t)

def Handle_TopLoc_SListNodeOfItemLocation_Create() -> "opencascade::handle< TopLoc_SListNodeOfItemLocation >":
    return _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_Create()

def Handle_TopLoc_SListNodeOfItemLocation_DownCast(t: "opencascade::handle< Standard_Transient > const &") -> "opencascade::handle< TopLoc_SListNodeOfItemLocation >":
    return _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_DownCast(t)

def Handle_TopLoc_SListNodeOfItemLocation_IsNull(t: "opencascade::handle< TopLoc_SListNodeOfItemLocation > const &") -> "bool":
    return _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_IsNull(t)
class TopLoc_IndexedMapOfLocation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< TopLoc_Location,TopLoc_MapLocationHasher >::const_iterator":
        return _TopLoc.TopLoc_IndexedMapOfLocation_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< TopLoc_Location,TopLoc_MapLocationHasher >::const_iterator":
        return _TopLoc.TopLoc_IndexedMapOfLocation_cend(self)

    def __init__(self, *args):
        _TopLoc.TopLoc_IndexedMapOfLocation_swiginit(self, _TopLoc.new_TopLoc_IndexedMapOfLocation(*args))

    def Exchange(self, theOther: "TopLoc_IndexedMapOfLocation") -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Exchange(self, theOther)

    def Assign(self, theOther: "TopLoc_IndexedMapOfLocation") -> "NCollection_IndexedMap< TopLoc_Location,TopLoc_MapLocationHasher > &":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Assign(self, theOther)

    def Set(self, theOther: "TopLoc_IndexedMapOfLocation") -> "NCollection_IndexedMap< TopLoc_Location,TopLoc_MapLocationHasher > &":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Set(self, theOther)

    def ReSize(self, theExtent: "Standard_Integer const") -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_ReSize(self, theExtent)

    def Add(self, theKey1: "TopLoc_Location") -> "Standard_Integer":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Add(self, theKey1)

    def Contains(self, theKey1: "TopLoc_Location") -> "Standard_Boolean":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Contains(self, theKey1)

    def Substitute(self, theIndex: "Standard_Integer const", theKey1: "TopLoc_Location") -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: "Standard_Integer const", theIndex2: "Standard_Integer const") -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: "Standard_Integer const") -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: "TopLoc_Location") -> "Standard_Boolean":
        return _TopLoc.TopLoc_IndexedMapOfLocation_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: "Standard_Integer const") -> "TopLoc_Location const &":
        return _TopLoc.TopLoc_IndexedMapOfLocation_FindKey(self, theIndex)

    def __call__(self, theIndex: "Standard_Integer const") -> "TopLoc_Location const &":
        return _TopLoc.TopLoc_IndexedMapOfLocation___call__(self, theIndex)

    def FindIndex(self, theKey1: "TopLoc_Location") -> "Standard_Integer":
        return _TopLoc.TopLoc_IndexedMapOfLocation_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Clear(self, *args)
    __swig_destroy__ = _TopLoc.delete_TopLoc_IndexedMapOfLocation

    def Size(self) -> "Standard_Integer":
        return _TopLoc.TopLoc_IndexedMapOfLocation_Size(self)

# Register TopLoc_IndexedMapOfLocation in _TopLoc:
_TopLoc.TopLoc_IndexedMapOfLocation_swigregister(TopLoc_IndexedMapOfLocation)

class TopLoc_MapLocationHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def HashCode(theKey: "TopLoc_Location", theUpperBound: "Standard_Integer const") -> "Standard_Integer":
        return _TopLoc.TopLoc_MapLocationHasher_HashCode(theKey, theUpperBound)

    @staticmethod
    def IsEqual(theKey1: "TopLoc_Location", theKey2: "TopLoc_Location") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapLocationHasher_IsEqual(theKey1, theKey2)

    def __init__(self):
        _TopLoc.TopLoc_MapLocationHasher_swiginit(self, _TopLoc.new_TopLoc_MapLocationHasher())
    __swig_destroy__ = _TopLoc.delete_TopLoc_MapLocationHasher

# Register TopLoc_MapLocationHasher in _TopLoc:
_TopLoc.TopLoc_MapLocationHasher_swigregister(TopLoc_MapLocationHasher)

def TopLoc_MapLocationHasher_HashCode(theKey: "TopLoc_Location", theUpperBound: "Standard_Integer const") -> "Standard_Integer":
    return _TopLoc.TopLoc_MapLocationHasher_HashCode(theKey, theUpperBound)

def TopLoc_MapLocationHasher_IsEqual(theKey1: "TopLoc_Location", theKey2: "TopLoc_Location") -> "Standard_Boolean":
    return _TopLoc.TopLoc_MapLocationHasher_IsEqual(theKey1, theKey2)

class TopLoc_MapOfLocation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< TopLoc_Location,TopLoc_MapLocationHasher >::const_iterator":
        return _TopLoc.TopLoc_MapOfLocation_cbegin(self)

    def cend(self) -> "NCollection_Map< TopLoc_Location,TopLoc_MapLocationHasher >::const_iterator":
        return _TopLoc.TopLoc_MapOfLocation_cend(self)

    def __init__(self, *args):
        _TopLoc.TopLoc_MapOfLocation_swiginit(self, _TopLoc.new_TopLoc_MapOfLocation(*args))

    def Exchange(self, theOther: "TopLoc_MapOfLocation") -> "void":
        return _TopLoc.TopLoc_MapOfLocation_Exchange(self, theOther)

    def Assign(self, theOther: "TopLoc_MapOfLocation") -> "NCollection_Map< TopLoc_Location,TopLoc_MapLocationHasher > &":
        return _TopLoc.TopLoc_MapOfLocation_Assign(self, theOther)

    def Set(self, theOther: "TopLoc_MapOfLocation") -> "NCollection_Map< TopLoc_Location,TopLoc_MapLocationHasher > &":
        return _TopLoc.TopLoc_MapOfLocation_Set(self, theOther)

    def ReSize(self, N: "Standard_Integer const") -> "void":
        return _TopLoc.TopLoc_MapOfLocation_ReSize(self, N)

    def Add(self, K: "TopLoc_Location") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Add(self, K)

    def Added(self, K: "TopLoc_Location") -> "TopLoc_Location const &":
        return _TopLoc.TopLoc_MapOfLocation_Added(self, K)

    def Remove(self, K: "TopLoc_Location") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TopLoc.TopLoc_MapOfLocation_Clear(self, *args)
    __swig_destroy__ = _TopLoc.delete_TopLoc_MapOfLocation

    def Size(self) -> "Standard_Integer":
        return _TopLoc.TopLoc_MapOfLocation_Size(self)

    def IsEqual(self, theOther: "TopLoc_MapOfLocation") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Contains(self, *args)

    def Union(self, theLeft: "TopLoc_MapOfLocation", theRight: "TopLoc_MapOfLocation") -> "void":
        return _TopLoc.TopLoc_MapOfLocation_Union(self, theLeft, theRight)

    def Unite(self, theOther: "TopLoc_MapOfLocation") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Unite(self, theOther)

    def HasIntersection(self, theMap: "TopLoc_MapOfLocation") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_HasIntersection(self, theMap)

    def Intersection(self, theLeft: "TopLoc_MapOfLocation", theRight: "TopLoc_MapOfLocation") -> "void":
        return _TopLoc.TopLoc_MapOfLocation_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: "TopLoc_MapOfLocation") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Intersect(self, theOther)

    def Subtraction(self, theLeft: "TopLoc_MapOfLocation", theRight: "TopLoc_MapOfLocation") -> "void":
        return _TopLoc.TopLoc_MapOfLocation_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: "TopLoc_MapOfLocation") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Subtract(self, theOther)

    def Difference(self, theLeft: "TopLoc_MapOfLocation", theRight: "TopLoc_MapOfLocation") -> "void":
        return _TopLoc.TopLoc_MapOfLocation_Difference(self, theLeft, theRight)

    def Differ(self, theOther: "TopLoc_MapOfLocation") -> "Standard_Boolean":
        return _TopLoc.TopLoc_MapOfLocation_Differ(self, theOther)

# Register TopLoc_MapOfLocation in _TopLoc:
_TopLoc.TopLoc_MapOfLocation_swigregister(TopLoc_MapOfLocation)

class TopLoc_Datum3D(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a default datum3d.

        Returns
        -------
        None
        Constructs a datum3d form a trsf from gp. an error is raised if the trsf is not a rigid transformation.

        Parameters
        ----------
        T: gp_Trsf

        Returns
        -------
        None

        """
        _TopLoc.TopLoc_Datum3D_swiginit(self, _TopLoc.new_TopLoc_Datum3D(*args))

    def DumpJsonToString(self, depth: "int"=-1) -> "std::string":
        r"""DumpJsonToString(TopLoc_Datum3D self, int depth=-1) -> std::string"""
        return _TopLoc.TopLoc_Datum3D_DumpJsonToString(self, depth)

    def Form(self, *args) -> "gp_TrsfForm":
        r"""
        Return transformation form.

        Returns
        -------
        gp_TrsfForm

        """
        return _TopLoc.TopLoc_Datum3D_Form(self, *args)

    def ShallowDumpToString(self) -> "std::string":
        r"""ShallowDumpToString(TopLoc_Datum3D self) -> std::string"""
        return _TopLoc.TopLoc_Datum3D_ShallowDumpToString(self)

    def Transformation(self, *args) -> "gp_Trsf const":
        r"""
        Returns a gp_trsf which, when applied to this datum, produces the default datum.

        Returns
        -------
        gp_Trsf

        """
        return _TopLoc.TopLoc_Datum3D_Transformation(self, *args)

    def Trsf(self, *args) -> "gp_Trsf const":
        r"""
        Returns a gp_trsf which, when applied to this datum, produces the default datum.

        Returns
        -------
        gp_Trsf

        """
        return _TopLoc.TopLoc_Datum3D_Trsf(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopLoc_Datum3D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_Datum3D

# Register TopLoc_Datum3D in _TopLoc:
_TopLoc.TopLoc_Datum3D_swigregister(TopLoc_Datum3D)

class TopLoc_ItemLocation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Sets the elementary datum to <d> sets the exponent to <p>.

        Parameters
        ----------
        D: TopLoc_Datum3D
        P: int

        Returns
        -------
        None

        """
        _TopLoc.TopLoc_ItemLocation_swiginit(self, _TopLoc.new_TopLoc_ItemLocation(*args))

    def DumpJsonToString(self, depth: "int"=-1) -> "std::string":
        r"""DumpJsonToString(TopLoc_ItemLocation self, int depth=-1) -> std::string"""
        return _TopLoc.TopLoc_ItemLocation_DumpJsonToString(self, depth)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_ItemLocation

# Register TopLoc_ItemLocation in _TopLoc:
_TopLoc.TopLoc_ItemLocation_swigregister(TopLoc_ItemLocation)

class TopLoc_Location(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an empty local coordinate system object. note: a location constructed from a default datum is said to be 'empty'.

        Returns
        -------
        None
        Constructs the local coordinate system object defined by the transformation t. t invokes in turn, a toploc_datum3d object.

        Parameters
        ----------
        T: gp_Trsf

        Returns
        -------
        None
        Constructs the local coordinate system object defined by the 3d datum d. exceptions standard_constructionerror if the transformation t does not represent a 3d coordinate system.

        Parameters
        ----------
        D: TopLoc_Datum3D

        Returns
        -------
        None

        """
        _TopLoc.TopLoc_Location_swiginit(self, _TopLoc.new_TopLoc_Location(*args))

        self.args = args

    def __setstate__(self, state):
        self.__init__(*state['args'])

    def __getstate__(self):
        if not hasattr(self, 'args'):
            self.args = {}
        return {'args': self.args}

    def Divided(self, *args) -> "TopLoc_Location":
        r"""
        Returns <self> / <other>.

        Parameters
        ----------
        Other: TopLoc_Location

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Divided(self, *args)

    def DumpJsonToString(self, depth: "int"=-1) -> "std::string":
        r"""DumpJsonToString(TopLoc_Location self, int depth=-1) -> std::string"""
        return _TopLoc.TopLoc_Location_DumpJsonToString(self, depth)

    def FirstDatum(self, *args) -> "opencascade::handle< TopLoc_Datum3D > const &":
        r"""
        Returns the first elementary datum of the location. use the nextlocation function recursively to access the other data comprising this location. exceptions standard_nosuchobject if this location is empty.

        Returns
        -------
        opencascade::handle<TopLoc_Datum3D>

        """
        return _TopLoc.TopLoc_Location_FirstDatum(self, *args)

    def FirstPower(self, *args) -> "Standard_Integer":
        r"""
        Returns the power elevation of the first elementary datum. exceptions standard_nosuchobject if this location is empty.

        Returns
        -------
        int

        """
        return _TopLoc.TopLoc_Location_FirstPower(self, *args)

    def HashCode(self, *args) -> "Standard_Integer":
        r"""
        Returns a hashed value for this local coordinate system. this value is used, with map tables, to store and retrieve the object easily, and is in the range [1, theupperbound]. @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        theUpperBound: int

        Returns
        -------
        int

        """
        return _TopLoc.TopLoc_Location_HashCode(self, *args)

    def __hash__(self) -> "Standard_Integer":
        r"""__hash__(TopLoc_Location self) -> Standard_Integer"""
        return _TopLoc.TopLoc_Location___hash__(self)

    def Identity(self, *args) -> "void":
        r"""
        Resets this location to the identity transformation.

        Returns
        -------
        None

        """
        return _TopLoc.TopLoc_Location_Identity(self, *args)

    def Inverted(self, *args) -> "TopLoc_Location":
        r"""
        Returns the inverse of <self>. //! <self> * inverted() is an identity.

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Inverted(self, *args)

    def IsDifferent(self, *args) -> "Standard_Boolean":
        r"""
        Returns true if this location and the location other do not have the same elementary data, i.e. do not contain the same series of toploc_datum3d and respective powers. this method is an alias for operator !=.

        Parameters
        ----------
        Other: TopLoc_Location

        Returns
        -------
        bool

        """
        return _TopLoc.TopLoc_Location_IsDifferent(self, *args)

    def IsEqual(self, *args) -> "Standard_Boolean":
        r"""
        Returns true if this location and the location other have the same elementary data, i.e. contain the same series of toploc_datum3d and respective powers. this method is an alias for operator ==.

        Parameters
        ----------
        Other: TopLoc_Location

        Returns
        -------
        bool

        """
        return _TopLoc.TopLoc_Location_IsEqual(self, *args)

    def IsIdentity(self, *args) -> "Standard_Boolean":
        r"""
        Returns true if this location is equal to the identity transformation.

        Returns
        -------
        bool

        """
        return _TopLoc.TopLoc_Location_IsIdentity(self, *args)

    def Multiplied(self, *args) -> "TopLoc_Location":
        r"""
        Returns <self> * <other>, the elementary datums are concatenated.

        Parameters
        ----------
        Other: TopLoc_Location

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Multiplied(self, *args)

    def NextLocation(self, *args) -> "TopLoc_Location const &":
        r"""
        Returns a location representing <self> without the first datum. we have the relation : //! <self> = nextlocation() * firstdatum() ^ firstpower() exceptions standard_nosuchobject if this location is empty.

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_NextLocation(self, *args)

    def Powered(self, *args) -> "TopLoc_Location":
        r"""
        Returns me at the power <pwr>. if <pwr> is zero returns identity. <pwr> can be lower than zero (usual meaning for powers).

        Parameters
        ----------
        pwr: int

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Powered(self, *args)

    def Predivided(self, *args) -> "TopLoc_Location":
        r"""
        Returns <other>.inverted() * <self>.

        Parameters
        ----------
        Other: TopLoc_Location

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Predivided(self, *args)

    def ShallowDumpToString(self) -> "std::string":
        r"""ShallowDumpToString(TopLoc_Location self) -> std::string"""
        return _TopLoc.TopLoc_Location_ShallowDumpToString(self)

    def Transformation(self, *args) -> "gp_Trsf const":
        r"""
        Returns the transformation associated to the coordinate system.

        Returns
        -------
        gp_Trsf

        """
        return _TopLoc.TopLoc_Location_Transformation(self, *args)

    def __ne_wrapper__(self, other: "TopLoc_Location") -> "bool":
        r"""__ne_wrapper__(TopLoc_Location self, TopLoc_Location other) -> bool"""
        return _TopLoc.TopLoc_Location___ne_wrapper__(self, other)

    def __ne__(self, right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def __mul__(self, *args) -> "TopLoc_Location":
        r"""
        No available documentation.

        Parameters
        ----------
        Other: TopLoc_Location

        Returns
        -------
        TopLoc_Location

        """
        return _TopLoc.TopLoc_Location___mul__(self, *args)

    def __truediv__(self, *args):
        return _TopLoc.TopLoc_Location___truediv__(self, *args)
    __div__ = __truediv__



    def __eq_wrapper__(self, other: "TopLoc_Location") -> "bool":
        r"""__eq_wrapper__(TopLoc_Location self, TopLoc_Location other) -> bool"""
        return _TopLoc.TopLoc_Location___eq_wrapper__(self, other)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_Location

# Register TopLoc_Location in _TopLoc:
_TopLoc.TopLoc_Location_swigregister(TopLoc_Location)

class TopLoc_SListNodeOfItemLocation(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: TopLoc_ItemLocation
        aTail: TopLoc_SListOfItemLocation

        Returns
        -------
        None

        """
        _TopLoc.TopLoc_SListNodeOfItemLocation_swiginit(self, _TopLoc.new_TopLoc_SListNodeOfItemLocation(*args))

    def Tail(self, *args) -> "TopLoc_SListOfItemLocation &":
        r"""
        No available documentation.

        Returns
        -------
        TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListNodeOfItemLocation_Tail(self, *args)

    def Value(self, *args) -> "TopLoc_ItemLocation &":
        r"""
        No available documentation.

        Returns
        -------
        TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_SListNodeOfItemLocation_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopLoc_SListNodeOfItemLocation_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Count(self):
    	pass

    __swig_destroy__ = _TopLoc.delete_TopLoc_SListNodeOfItemLocation

# Register TopLoc_SListNodeOfItemLocation in _TopLoc:
_TopLoc.TopLoc_SListNodeOfItemLocation_swigregister(TopLoc_SListNodeOfItemLocation)

class TopLoc_SListOfItemLocation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an empty list.

        Returns
        -------
        None
        Creates a list with <anitem> as value and <atail> as tail.

        Parameters
        ----------
        anItem: TopLoc_ItemLocation
        aTail: TopLoc_SListOfItemLocation

        Returns
        -------
        None
        Creates a list from an other one. the lists are shared.

        Parameters
        ----------
        Other: TopLoc_SListOfItemLocation

        Returns
        -------
        None
        Move constructor.

        Parameters
        ----------
        theOther: TopLoc_SListOfItemLocation

        Returns
        -------
        None

        """
        _TopLoc.TopLoc_SListOfItemLocation_swiginit(self, _TopLoc.new_TopLoc_SListOfItemLocation(*args))

    def Assign(self, *args) -> "TopLoc_SListOfItemLocation &":
        r"""
        Sets a list from an other one. the lists are shared. the list itself is returned.

        Parameters
        ----------
        Other: TopLoc_SListOfItemLocation

        Returns
        -------
        TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Assign(self, *args)

    def Clear(self, *args) -> "void":
        r"""
        Sets the list to be empty.

        Returns
        -------
        None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Clear(self, *args)

    def Construct(self, *args) -> "void":
        r"""
        Replaces the list by a list with <anitem> as value and the list <self> as tail.

        Parameters
        ----------
        anItem: TopLoc_ItemLocation

        Returns
        -------
        None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Construct(self, *args)

    def IsEmpty(self, *args) -> "Standard_Boolean":
        r"""
        Returne true if this list is empty.

        Returns
        -------
        bool

        """
        return _TopLoc.TopLoc_SListOfItemLocation_IsEmpty(self, *args)

    def More(self, *args) -> "Standard_Boolean":
        r"""
        Returns true if the iterator has a current value. this is !isempty().

        Returns
        -------
        bool

        """
        return _TopLoc.TopLoc_SListOfItemLocation_More(self, *args)

    def Next(self, *args) -> "void":
        r"""
        Moves the iterator to the next object in the list. if the iterator is empty it will stay empty. this is totail().

        Returns
        -------
        None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Next(self, *args)

    def Tail(self, *args) -> "TopLoc_SListOfItemLocation const &":
        r"""
        Returns the current tail of the list. on an empty list the tail is the list itself.

        Returns
        -------
        TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Tail(self, *args)

    def ToTail(self, *args) -> "void":
        r"""
        Replaces the list <self> by its tail.

        Returns
        -------
        None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_ToTail(self, *args)

    def Value(self, *args) -> "TopLoc_ItemLocation const &":
        r"""
        Returns the current value of the list. an error is raised if the list is empty.

        Returns
        -------
        TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_SListOfItemLocation

# Register TopLoc_SListOfItemLocation in _TopLoc:
_TopLoc.TopLoc_SListOfItemLocation_swigregister(TopLoc_SListOfItemLocation)





